service: dota-qualifier-streams

package:
  include:
    - serverless.yml

provider:
  name: aws
  runtime: nodejs6.10
  stage: v1
  region: eu-central-1
  apiKeys:
    - ${self:provider.stage}-dev-key
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
        - "s3:PutObjectAcl"
      Resource: "arn:aws:s3:::dota-qualifier-streams/data.json"
    - Effect: "Allow"
      Action:
        - "iot:Publish"
      Resource: "arn:aws:iot:eu-central-1:130448155460:topic/dota-qualifier-streams/data.json"
  memorySize: 128
  timeout: 10

functions:
  fullUpdate: #Dev function to make a full update, requires an api key
    handler: handler.fullUpdate
    events:
      - http:
          path: full-update
          method: post
          cors: true
          private: true
  authorizer:
    handler: authorizer.authorize
  login:
    handler: authorizer.login
    requireRole:
      - admin
      - moderator
    events:
      - http:
          path: login
          method: get
          cors: true
          authorizer:
            name: authorizer
            resultTtlInSeconds: 300
            identitySource: method.request.header.Authorization
            type: token
  updateStreams:
    handler: handler.updateStreams
    requireRole:
      - admin
      - moderator
    events:
      - http:
          path: update-streams
          method: post
          cors: true
          authorizer:
            name: authorizer
            resultTtlInSeconds: 300
            identitySource: method.request.header.Authorization
            type: token

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Credentials: "'false'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    DynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: dota-qualifier-streams-users
        AttributeDefinitions:
          - AttributeName: twitchUserId
            AttributeType: N
        KeySchema:
          - AttributeName: twitchUserId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    DynamoDBIamPolicy:
      Type: AWS::IAM::Policy
      DependsOn: DynamoDbTable
      Properties:
        PolicyName: lambda-dynamodb
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:Scan
              Resource: arn:aws:dynamodb:eu-central-1:130448155460:table/${self:resources.Resources.DynamoDbTable.Properties.TableName}
        Roles:
          - Ref: IamRoleLambdaExecution
